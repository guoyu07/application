<?php
/**
 * Spiral Framework, SpiralScout LLC.
 *
 * @package   spiralFramework
 * @author    Anton Titov (Wolfy-J)
 * @copyright Â©2009-2011
 */

namespace application\models;

use spiral\classes\models\DataFilter;
use spiral\classes\validators\Address;
use spiral\core\Image;
use spiral\core\Request;
use spiral\helpers\FileHelper;
use spiral\helpers\HttpHelper;

class FileUpload extends DataFilter
{
    /**
     * Maximum allowed filesize. 200Mb by default.
     */
    const maxFilesize = 204800;

    /**
     * Forbidden file formats.
     *
     * @var array
     */
    static protected $forbidden = array('php', 'exe', 'cgi', 'bin');

    /**
     * Input name.
     *
     * @var string
     */
    protected $input = '';

    /**
     * File validation rules.
     *
     * @var array
     */
    protected $validates = array(
        'file' => array(
            array('notEmpty', 'message' => '[[Please select file to upload.]]'),
            array('file::exists', 'message' => '[[Please select file to upload.]]'),
            array('file::size', array(self::maxFilesize), 'message' => '[[Your file is too big.]]'),
            array(array('application\\models\\FileUpload', 'formatAllowed'), 'message' => '[[Invalid file format.]]')
        )
    );

    /**
     * Alternative constructing.
     *
     * @param string $name     Field name.
     * @param string $filename Local filename.
     */
    public function __construct($name, $filename = '')
    {
        $this->input = $name;

        if (!$filename)
        {
            $this->data['file'] = isset(Request::$FILES[$name]) ? Request::$FILES[$name] : null;
        }
        else
        {
            if (!Address::url($filename))
            {
                $this->errors['file'] = 'Unable to upload file.';
            }
            else
            {
                if ($data = HttpHelper::get($filename))
                {
                    $tempname = FileHelper::tempname();
                    FileHelper::write($tempname, $data);

                    //Emulating upload
                    $this->data['file'] = array(
                        'name'     => basename($filename),
                        'tmp_name' => $tempname,
                        'error'    => 0,
                        'local'    => true
                    );
                }
                else
                {
                    $this->errors['file'] = 'Unable to upload file.';
                }
            }
        }
    }

    /**
     * Input name.
     *
     * @return string
     */
    public function getInput()
    {
        return $this->input;
    }

    /**
     * Was file uploaded?
     *
     * @return bool
     */
    public function isUploaded()
    {
        if (!empty($this->data['file']['local']) || $this->errors)
        {
            return true;
        }

        return isset($this->data['file']['tmp_name']) ? is_uploaded_file($this->data['file']['tmp_name']) : false;
    }

    /**
     * Check if file format allowed.
     *
     * @param array $file
     * @return bool
     */
    static public function formatAllowed($file)
    {
        $extension = FileHelper::getExtension($file['name']);

        return !in_array($extension, self::$forbidden);
    }

    /**
     * Filename.
     *
     * @return string
     */
    public function getFilename()
    {
        return isset($this->data['file']['tmp_name']) ? $this->data['file']['tmp_name'] : null;
    }

    /**
     * File original name.
     *
     * @return mixed
     */
    public function getName()
    {
        return isset($this->data['file']['name']) ? $this->data['file']['name'] : null;
    }

    /**
     * File original name without extension.
     *
     * @return mixed
     */
    public function getOnlyName()
    {
        return substr($this->getName(), 0, -1 * (strlen($this->getExtension()) + 1));
    }

    /**
     * File extension.
     *
     * @return bool
     */
    public function getExtension()
    {
        return FileHelper::getExtension($this->getName());
    }

    /**
     * Filesize.
     *
     * @return int
     */
    public function getFilesize()
    {
        return filesize($this->getFilename());
    }

    /**
     * Check is file supportable image.
     *
     * @param array $formats
     * @return bool
     */
    public function isImage(array $formats = array())
    {
        $image = Image::open($this->getFilename());
        if (!$image->isSupported())
        {
            return false;
        }

        if ($formats && !in_array($image->getType(), $formats))
        {
            return false;
        }

        return true;
    }

    /**
     * Error messages.
     *
     * @param bool $reset
     * @return array
     */
    public function getErrors($reset = false)
    {
        $errors = parent::getErrors($reset);
        if (isset($errors['file']))
        {
            return array(
                $this->input => $errors['file']
            );
        }

        return $errors;
    }
}